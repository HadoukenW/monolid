---
import HeaderLink from './HeaderLink.astro';

import { getSanity } from '../lib/api';
import { urlForImage } from '../lib/urlForImage'

const headerlinks = await getSanity(`*[_type == 'headerlinks']{
	headerlinksLogo,
	headerlinksNavigation,
	headerlinksContacts,
	headerlinksOpeningHours
}`)
---
<div class="tradeInOffer">
	<a class="tradeInOffer-link" href="/#tradeIn">Воспользуйтесь нашим Трейд-ин предложением!</a>
	<button aria-label="Закрыть меню" class="tradeInOffer-close">
		<svg aria-hidden="true"  xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 320.591 320.591" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><path d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z" fill="#000000" opacity="1" data-original="#000000"></path><path d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"></path></g></svg>
	</button>
</div>
<header class="mainHeader" itemtype="https://schema.org/WPHeader" itemscope>
	<div class="container">
		<div class="header__wrapper">
			<div class="upper-header">
				<div itemscope itemtype="https://schema.org/LocalBusiness">
					<a class="logo" href="/">
						<meta itemprop="telephone" content={headerlinks[0]?.headerlinksContacts.phone[0]}>
						<div itemprop="address" itemscope itemtype="http://schema.org/PostalAddress">
							<meta itemprop="streetAddress" content={headerlinks[0]?.headerlinksContacts.address}>
							<meta itemprop="postalCode" content="454136">
							<meta itemprop="addressLocality" content="Челябинск">
						</div>
						<meta itemprop="openingHours" content={headerlinks[0]?.headerlinksOpeningHours[0].time}/>
						<meta itemprop="email" content="monolid2024@yandex.ru">
						<link itemprop="url" href="https://monolid74.com/">
						<img itemprop="logo"  src={urlForImage(headerlinks[0]?.headerlinksLogo).url()} alt="Логотип"/>
						<meta itemprop="name" content="Монолид — Компания по продаже недвижимости">
						<div itemprop="geo" itemscope="" itemtype="https://schema.org/GeoCoordinates">
							<meta itemprop="latitude" content="55.172136">
							<meta itemprop="longitude" content="61.316809">
						</div>
					</a>
				</div>

				
				<div class="header__workingHours">
					<div class="location-wrapper">
						<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-astro-cid-jog7lwvv=""> <path d="M7.70538 0C4.67267 0 2.20538 2.59944 2.20538 5.79456C2.20538 9.75981 7.12734 15.581 7.3369 15.8269C7.53373 16.0579 7.87739 16.0575 8.07387 15.8269C8.28342 15.581 13.2054 9.75981 13.2054 5.79456C13.2053 2.59944 10.7381 0 7.70538 0ZM7.70538 8.70997C6.17955 8.70997 4.93822 7.40212 4.93822 5.79456C4.93822 4.187 6.17958 2.87919 7.70538 2.87919C9.23119 2.87919 10.4725 4.18703 10.4725 5.79459C10.4725 7.40216 9.23119 8.70997 7.70538 8.70997Z" fill="#1C244B" data-astro-cid-jog7lwvv=""></path> </svg>
						<div>{headerlinks[0]?.headerlinksContacts.address}</div>
					</div>
					<div class="hours__wrapper">
						{headerlinks[0]?.headerlinksOpeningHours.map((item) => (
							<b>{item.days}<span style="margin-left: 5px">{item.time}</span></b>
							
						))}
					</div>
				</div>
				
				
				<div class="header__call-wrapper">
					<button class="header__callback">Заказать звонок</button>
					<address>
						<div class="header__phone-wrapper">
							{
								headerlinks[0] && headerlinks[0].headerlinksContacts.phone.map(item => {
								let phoneNumber = item;
								if (item && item.startsWith('8')) {
									phoneNumber = '+7' + item.slice(1).replace(/-/g, '');
								} else if (item) {
									phoneNumber = item.replace(/[-\s]/g, '');
								}
								phoneNumber = phoneNumber.replace(/[(){}[\]]/g, ''); // Remove parentheses and other symbols
								return <a href={`tel:${phoneNumber}`}>{item}</a>;
							})
							}
						</div>
					</address>
				</div>
				<address class="main-nav__address">
					<ul>
						{
							headerlinks[0] && headerlinks[0].headerlinksContacts.socials.map(item => (
								
							<li>
								<a target="_blank" href={item.link}>
									<img src={urlForImage(item.icon).url()} alt="Социальная сеть">
								</a>
							</li>
							))
						}
						
				
							
						
					</ul>
				</address>
				<button aria-label="Открыть меню" class="burger">
					<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 64 64" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path d="M53 21H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3zM53 35H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3zM53 49H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3z"></path></g></svg>
				</button>
			</div>
			
			<nav itemtype="https://schema.org/SiteNavigationElement" itemscope aria-label="Основное меню">
				<ul class="nav__links">
					{headerlinks[0] && headerlinks[0].headerlinksNavigation.map(item => (
						<HeaderLink href={item.link}>{item.title}</HeaderLink>
					))}
					{/* <HeaderLink href="/catalog/">Каталог новостроек</HeaderLink>
					<HeaderLink href="/vtorichka/">Вторичное жильё</HeaderLink>
					<HeaderLink href="/nashi-uslugi/">Наши услуги</HeaderLink>
					<HeaderLink href="/calc/">Ипотечный калькулятор</HeaderLink>
					<HeaderLink href="/faq/">Ответы на вопросы</HeaderLink>
					<HeaderLink href="/contacts/">Контакты</HeaderLink>
					<HeaderLink href="/blog/">Новости</HeaderLink> */}
				</ul>
			</nav>
		</div>
	</div>
</header>

<nav class="burger-menu" aria-label="Раскрывающееся меню">
	<ul itemscope itemtype="https://schema.org/SiteNavigationElement">
		{headerlinks[0] && headerlinks[0].headerlinksNavigation.map(item => (
			<HeaderLink href={item.link}>{item.title}</HeaderLink>
		))}
		
	</ul>

	<div class="menu__orgInfo">
		<div class="menu__org-wrapper">
			<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-astro-cid-jog7lwvv=""> <path d="M7.70538 0C4.67267 0 2.20538 2.59944 2.20538 5.79456C2.20538 9.75981 7.12734 15.581 7.3369 15.8269C7.53373 16.0579 7.87739 16.0575 8.07387 15.8269C8.28342 15.581 13.2054 9.75981 13.2054 5.79456C13.2053 2.59944 10.7381 0 7.70538 0ZM7.70538 8.70997C6.17955 8.70997 4.93822 7.40212 4.93822 5.79456C4.93822 4.187 6.17958 2.87919 7.70538 2.87919C9.23119 2.87919 10.4725 4.18703 10.4725 5.79459C10.4725 7.40216 9.23119 8.70997 7.70538 8.70997Z" fill="#1C244B" data-astro-cid-jog7lwvv=""></path> </svg>
			<div>{headerlinks[0]?.headerlinksContacts.address}</div>
		</div>
		<div class="menu__org-hours">
			{headerlinks[0]?.headerlinksOpeningHours.map((item) => (
				<b>{item.days}<span style="margin-left: 5px">{item.time}</span></b>
			))}
		</div>
	</div>

	<address class="secondary-nav__address">
		<div class="secondary-nav__wrapper">
			<ul>
				{
					headerlinks[0] && headerlinks[0].headerlinksContacts.socials.map(item => (
					<li>
						<a target="_blank" href={item.link}>
							<img src={urlForImage(item.icon).url()} alt="Социальная сеть">
						</a>
					</li>
					))
				}
			</ul>
			<button class="header__callback">Заказать звонок</button>
			<div style="display: flex; flex-direction: column; gap: 5px;">
				{
					headerlinks[0] && headerlinks[0].headerlinksContacts.phone.map(item => {
					let phoneNumber = item;
					if (item && item.startsWith('8')) {
						phoneNumber = '+7' + item.slice(1).replace(/-/g, '');
					} else if (item) {
						phoneNumber = item.replace(/[-\s]/g, '');
					}
					phoneNumber = phoneNumber.replace(/[(){}[\]]/g, ''); // Remove parentheses and other symbols
					return <a href={`tel:${phoneNumber}`}>{item}</a>;
				})
				}
			</div>
		</div>
	</address>

	<button aria-label="Закрыть меню" class="menu-close">
		<svg aria-hidden="true"  xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 320.591 320.591" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><path d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z" fill="#000000" opacity="1" data-original="#000000"></path><path d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"></path></g></svg>
	</button>
</nav>

<form class="widget__form">
	<button aria-label="Закрыть форму" class="menu-close-form">
		<svg aria-hidden="true"  xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 320.591 320.591" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><path d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z" fill="#000000" opacity="1" data-original="#000000"></path><path d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"></path></g></svg>
	</button>
	<p class="form__title">Бесплатная консультация</p>

	<div class="input-box">
		<label for="hero__name"><input id="hero__name" placeholder="Введите ваше имя" type="text" required name="name"/></label>
		<label for="hero__phone"><input id="hero__phone" class="phoneMask"  placeholder="Ваш номер телефона" type="tel" required name="phone"/></label>
	</div>

	<button type="submit"class="input-box-btn">Записаться</button>

	<p style="font-size: 12px; margin-top: 10px; text-align: center;">Нажимая на кнопку, вы даете согласие на обработку персональных данных и соглашаетесь c политикой конфиденциальности</p>
	<div class="form-sent-message widgetMessage">
		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="52" height="52" x="0" y="0" viewBox="0 0 24 24" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><switch><g><g fill="#02bc7d"><path d="M9.7 11.3c-.4-.4-1-.4-1.4 0s-.4 1 0 1.4l3 3c.2.2.4.3.7.3s.5-.1.7-.3l7-8c.3-.5.3-1.1-.2-1.4-.4-.3-1-.3-1.3.1L12 13.5z" fill="#02bc7d" opacity="1" data-original="#02bc7d"></path><path d="M21 11c-.6 0-1 .4-1 1 0 4.4-3.6 8-8 8s-8-3.6-8-8c0-2.1.8-4.1 2.3-5.6C7.8 4.8 9.8 4 12 4c.6 0 1.3.1 1.9.2.5.2 1.1-.1 1.3-.7s-.2-1-.7-1.2h-.1c-.8-.2-1.6-.3-2.4-.3C6.5 2 2 6.5 2 12.1c0 2.6 1.1 5.2 2.9 7 1.9 1.9 4.4 2.9 7 2.9 5.5 0 10-4.5 10-10 .1-.6-.4-1-.9-1z" fill="#02bc7d" opacity="1" data-original="#02bc7d"></path></g></g></switch></g></svg>										
		<p>Форма успешно отправлена</p>
	</div>
</form>

<div class="widget">
	<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 473.806 473.806" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path d="M374.456 293.506c-9.7-10.1-21.4-15.5-33.8-15.5-12.3 0-24.1 5.3-34.2 15.4l-31.6 31.5c-2.6-1.4-5.2-2.7-7.7-4-3.6-1.8-7-3.5-9.9-5.3-29.6-18.8-56.5-43.3-82.3-75-12.5-15.8-20.9-29.1-27-42.6 8.2-7.5 15.8-15.3 23.2-22.8 2.8-2.8 5.6-5.7 8.4-8.5 21-21 21-48.2 0-69.2l-27.3-27.3c-3.1-3.1-6.3-6.3-9.3-9.5-6-6.2-12.3-12.6-18.8-18.6-9.7-9.6-21.3-14.7-33.5-14.7s-24 5.1-34 14.7l-.2.2-34 34.3c-12.8 12.8-20.1 28.4-21.7 46.5-2.4 29.2 6.2 56.4 12.8 74.2 16.2 43.7 40.4 84.2 76.5 127.6 43.8 52.3 96.5 93.6 156.7 122.7 23 10.9 53.7 23.8 88 26 2.1.1 4.3.2 6.3.2 23.1 0 42.5-8.3 57.7-24.8.1-.2.3-.3.4-.5 5.2-6.3 11.2-12 17.5-18.1 4.3-4.1 8.7-8.4 13-12.9 9.9-10.3 15.1-22.3 15.1-34.6 0-12.4-5.3-24.3-15.4-34.3l-54.9-55.1zm35.8 105.3c-.1 0-.1.1 0 0-3.9 4.2-7.9 8-12.2 12.2-6.5 6.2-13.1 12.7-19.3 20-10.1 10.8-22 15.9-37.6 15.9-1.5 0-3.1 0-4.6-.1-29.7-1.9-57.3-13.5-78-23.4-56.6-27.4-106.3-66.3-147.6-115.6-34.1-41.1-56.9-79.1-72-119.9-9.3-24.9-12.7-44.3-11.2-62.6 1-11.7 5.5-21.4 13.8-29.7l34.1-34.1c4.9-4.6 10.1-7.1 15.2-7.1 6.3 0 11.4 3.8 14.6 7l.3.3c6.1 5.7 11.9 11.6 18 17.9 3.1 3.2 6.3 6.4 9.5 9.7l27.3 27.3c10.6 10.6 10.6 20.4 0 31-2.9 2.9-5.7 5.8-8.6 8.6-8.4 8.6-16.4 16.6-25.1 24.4-.2.2-.4.3-.5.5-8.6 8.6-7 17-5.2 22.7l.3.9c7.1 17.2 17.1 33.4 32.3 52.7l.1.1c27.6 34 56.7 60.5 88.8 80.8 4.1 2.6 8.3 4.7 12.3 6.7 3.6 1.8 7 3.5 9.9 5.3.4.2.8.5 1.2.7 3.4 1.7 6.6 2.5 9.9 2.5 8.3 0 13.5-5.2 15.2-6.9l34.2-34.2c3.4-3.4 8.8-7.5 15.1-7.5 6.2 0 11.3 3.9 14.4 7.3l.2.2 55.1 55.1c10.3 10.2 10.3 20.7.1 31.3zM256.056 112.706c26.2 4.4 50 16.8 69 35.8s31.3 42.8 35.8 69c1.1 6.6 6.8 11.2 13.3 11.2.8 0 1.5-.1 2.3-.2 7.4-1.2 12.3-8.2 11.1-15.6-5.4-31.7-20.4-60.6-43.3-83.5s-51.8-37.9-83.5-43.3c-7.4-1.2-14.3 3.7-15.6 11s3.5 14.4 10.9 15.6zM473.256 209.006c-8.9-52.2-33.5-99.7-71.3-137.5s-85.3-62.4-137.5-71.3c-7.3-1.3-14.2 3.7-15.5 11-1.2 7.4 3.7 14.3 11.1 15.6 46.6 7.9 89.1 30 122.9 63.7 33.8 33.8 55.8 76.3 63.7 122.9 1.1 6.6 6.8 11.2 13.3 11.2.8 0 1.5-.1 2.3-.2 7.3-1.1 12.3-8.1 11-15.4z" fill="#000000"></path></g></svg>
</div>
<div class="blurry"></div>

<div class="callback__modal">
	<div>Заказать звонок</div>

	<form class="callback__form" >
		<label class="visually-hidden">Телефон</label>
		<input class="phoneMask callback__phoneInput" placeholder="Телефон" name="phone" type="tel" required/>
		<button type="submit" class="callback__btn">Жду звонка</button>
		<p>Нажимая на кнопку, вы даете согласие на обработку персональных данных и соглашаетесь c политикой конфиденциальности</p>
	</form>
	<button aria-label="Закрыть форму" class="callback-form__close">
		<svg aria-hidden="true"  xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 320.591 320.591" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><path d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z" fill="#000000" opacity="1" data-original="#000000"></path><path d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"></path></g></svg>
	</button>
	<div class="form-sent-message callbackMessage">
		<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="52" height="52" x="0" y="0" viewBox="0 0 24 24" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><switch><g><g fill="#02bc7d"><path d="M9.7 11.3c-.4-.4-1-.4-1.4 0s-.4 1 0 1.4l3 3c.2.2.4.3.7.3s.5-.1.7-.3l7-8c.3-.5.3-1.1-.2-1.4-.4-.3-1-.3-1.3.1L12 13.5z" fill="#02bc7d" opacity="1" data-original="#02bc7d"></path><path d="M21 11c-.6 0-1 .4-1 1 0 4.4-3.6 8-8 8s-8-3.6-8-8c0-2.1.8-4.1 2.3-5.6C7.8 4.8 9.8 4 12 4c.6 0 1.3.1 1.9.2.5.2 1.1-.1 1.3-.7s-.2-1-.7-1.2h-.1c-.8-.2-1.6-.3-2.4-.3C6.5 2 2 6.5 2 12.1c0 2.6 1.1 5.2 2.9 7 1.9 1.9 4.4 2.9 7 2.9 5.5 0 10-4.5 10-10 .1-.6-.4-1-.9-1z" fill="#02bc7d" opacity="1" data-original="#02bc7d"></path></g></g></switch></g></svg>										
		<p>Форма успешно отправлена</p>
	</div>
</div>


<header class="sticky__header">
	<div class="container">
		<div class="sticky__wrapper">
	
			<nav aria-label="Липкое меню">
				<ul class="sticky__header-links">
					{headerlinks[0] && headerlinks[0].headerlinksNavigation.map(item => (
						<HeaderLink href={item.link}>{item.title}</HeaderLink>
					))}
					
				</ul>
			</nav>
	
			<button class="sticky__header-btn header__callback">Заказать звонок</button>

			<button aria-label="Открыть меню" class="burger sticky-burger">
				<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="512" height="512" x="0" y="0" viewBox="0 0 64 64" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path d="M53 21H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3zM53 35H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3zM53 49H11c-1.7 0-3-1.3-3-3s1.3-3 3-3h42c1.7 0 3 1.3 3 3s-1.3 3-3 3z"></path></g></svg>
			</button>
		</div>
	</div>
</header>

<style lang="scss">

	.sticky__header {
		padding: 25px 0;
		position: fixed;
		width: 100%;
		left: 0;
		right: 0;
		top: 0;
		z-index: 10;
		background-color: var(--primary);
		box-shadow: rgba(100,100,111,.2) 0 7px 29px 0;
		pointer-events: none;
		transform: translateY(-100px);
		transition: .3s ease-in-out;

		@media(max-width: 1100px) {
			padding: 15px 0;
		}

		&.active {
			transform: translateY(0);
			pointer-events: all;
		}

		.sticky__wrapper {
			display: flex;
			justify-content: center;
			gap: 20px;
			align-items: center;

			@media(max-width: 1167px) {
				gap: 15px;
			}

			@media(max-width: 1100px) {
				justify-content: space-between;
				gap: 0;
			}

			nav {
				padding-bottom: 0;
			}
			.sticky__header-links {
				display: flex;
				gap: 30px;
    			align-items: center;
				
				@media(max-width: 1167px) {
					gap: 20px;

					
				}

				@media(max-width: 1100px) {
					display: none;
				}

				a {
					color: var(--headers-primary);
					font-weight: 500;
					font-size: 16px;
					
					@media(max-width: 1324px) {
						font-size: 14px;
					}
				}
			}

			.sticky__header-btn {
				margin-left: auto;
				font-weight: 500;
				font-size: 16px;
				padding: 7px 15px;
				background-color: var(--btn-primary);
				border-radius: 20px;
				color: var(--primary);
				line-height: 160%;
				transition: 0.3s ease background;
				&:hover {
						background: #0b1099;
				}
				@media(max-width: 1100px) {
					margin-left: unset;
					margin-right: auto;
				}
			}

			.sticky-burger {
				@media(max-width: 1100px) {
					display: block;
				}
			}
		}
	}

	.callback__modal {
		opacity: 0;
		pointer-events: none;
		position: fixed;
		&.active {
			max-width: 600px;
			width: 90%;
			display: flex;
			inset: 0;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			align-items: center;
			justify-content: center;
			z-index: 60;
			background-color: var(--primary);
			color: var(--headers-primary);
			padding: 25px;
			height:min-content;
			flex-direction: column;
			transition: opacity 1s ease-in-out;
			opacity: 1;
			pointer-events: all;
		}

		div {
			font-size: 1.5rem;
			text-align: center;
		}

		form {
			display: flex;
			flex-direction: column;
			margin-top: 25px;

				button {
					color: var(--primary);
					padding: 7px 21px;
					background: var(--btn-primary);
					border-radius: 20px;
					display: flex;
					margin-top: 15px;
					display: flex;
					align-items: center;
					justify-content: center;
					font-size: 18px;
					line-height: 160%;
					transition: .3s ease background;
					font-weight: normal;
					&:hover {
						background: #0b1099;
					}
				}

			p {
				font-size: 12px;
				margin-top: 10px;
				text-align: center;
			}
		}

		.callback-form__close {
            display: none;
    
            &.active {
                display: flex;
                position: absolute;
                right: 10px;
                top: 10px;
            }
    
            svg {
                width: 20px;
                height: 20px;
                fill: var(--primary);
				
                path {
					fill: var(--headers-primary);
                }
            }
    
		}

	}

	.upper-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: 1.5rem;

		@media(max-width: 992px) {
			margin-bottom: 0;	
		}

		@media(max-width: 600px) {
			gap: 15px;
		}
	}
	.header__phone-wrapper {
		display: flex;
		flex-direction: column;
		gap: 5px;


		div {
			font-weight: 400;
			font-size: 12px;
			line-height: 130%;
			color: #7f7f7f;
		}
		a {
			font-weight: 700;
			font-size: 18px;
			line-height: 130%;
			color: #1e1e1e;

			transition: .3s ease opacity;
			
			&:hover {
				opacity: 0.65;
			}
		}
	}

	.header__callback {
		font-weight: 500;
		font-size: 18px;
		padding: 7px 23px;
		background-color: var(--btn-primary);
		border-radius: 20px;
		color: var(--primary);
		line-height: 160%;

		transition: .3s ease background;

		

		

		&:hover {
			background: #0b1099;
		}
	}

	header {
		padding: 15px 0;
		
	}
	
	nav {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 15px;
		padding-bottom: .5rem;

		@media(max-width: 992px) {
			display: none;	
		}
		
	}
	.nav__links {
		display: flex;
		gap: 30px;
		align-items: center;

		@media(max-width: 1167px) {
			gap: 20px;
		}
		
		@media(max-width: 992px) {
			gap: 15px;
			display: none;
		}
		
	}

	.burger-menu {
		transform: translateX(300px);
		display: unset !important;
		opacity: 0;
		position: fixed;
		pointer-events: none;
		&.active {
			width: 300px;
			height: 100dvh;
			background-color: var(--primary);
			z-index: 15;
			display: flex;
			justify-content: unset;
			right: 0px;
			padding: 100px 10px;
			align-items: unset;
			flex-direction: column;
			overflow-y: auto;
			transform: translateX(0);
			transition: transform .5s ease-in-out;
			opacity: 1;
			pointer-events: all;
			ul {
				display: flex;
				flex-direction: column;
				
				gap: 15px;

				

				a {
				
					font-weight: normal;

					@media(max-width: 1100px) {
						font-size: 22px;
					}
				}

				
			}

			
		}
	}

	.burger {
		display: none;
		@media(max-width: 992px) {
			display: flex;
		}

		svg {
			width: 36px;
			height: 36px;
		}
	}

	.menu-close {
		display: none;

		svg {
			width: 25px;
			height: 25px;

			fill: var(--headers-primary);

			path {
				fill: var(--headers-primary);
			}
		}

		&.active {
			display: flex;
			position: absolute;
			right: 15px;
			top: 15px;
		}
	}
	a {
		color: var(--headers-primary);
		font-weight: 500;
		font-size: 16px;
		@media (max-width: 1160px) {
			font-size: 15px;
		}

	}

	address {
		display: flex;
		align-items: center;
		margin-bottom: unset !important;
		font-style: italic !important;
		a {
			font-weight: 700;
			font-size: 20px;
			line-height: 130%;
			color: #1e1e1e;
		}
		.secondary-nav__wrapper {
			display: flex;
			flex-direction: column-reverse;
			gap: 1.5rem;

			@media(max-width: 650px) {
				.header__callback {
					display: block;
				}
			}
		}
		ul {
			display: flex;
			gap: 8px;
			margin-bottom: unset !important;
			padding-left: unset !important;
			div {
				display: flex;
				gap: 1rem;
				justify-content: center;
				
			}
		}
		li {
			display: flex;
			align-items: center;
		}

		svg, img {
			width: 30px;
			height: 30px;
		}
	}


		.main-nav__address {
			
			@media(max-width: 992px) {
				display: none;
			}
		}

		.secondary-nav__address {
			display: flex;
			
			margin-top: 30px;
			
			ul {
				display: flex;
				flex-direction: row !important;
			}

		}


	//widget 
	.widget {
		background-color: var(--btn-primary);
		padding: 10px;
		border-radius: 50%;
		position: fixed;
		bottom: 25px;
		right: 25px;
		z-index: 14;
		width: 50px;
		height: 50px;
		cursor: pointer;

		svg {
			width: 100%;
			height: auto;
			animation: 1200ms ease 0s normal none 1 running shake;
			animation-iteration-count: infinite;
			-webkit-animation: 1200ms ease 0s normal none 1 running shake;
			-webkit-animation-iteration-count: infinite;
			path {
				fill: var(--primary)
			}
		}

		
	}

	form {

            .form__title {
                font-weight: 400;
                font-size: 1.5rem;
                text-align: center;
                
                margin-bottom: 25px;
    
                @media(max-width: 992px) {
                    max-width: unset;
                }

				@media(max-width: 992px) {
					font-size: 22px;
				}
            }
            .input-box {
                display: flex;
                flex-direction: column;
                gap: 15px;
				width: 100%;
                
            }
            input {
                padding: 13px;
                border-radius: 5px;
                outline: none;
                border: 0;
                font-weight: 400;
                color: var(--headers-primary);
                font-size: 18px;
                border: 1px solid #d3dad7;
				width: 100%;
            
            }
    
            .input-box-btn {
                color: var(--primary);
                padding: 7px 21px;
                background: var(--btn-primary);
                border-radius: 20px;
                display: flex;
                margin-top: 15px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                line-height: 160%;
                transition: .3s ease background;
				width: 100%;
				font-weight: normal;
                &:hover {
                background: #0b1099;
                }
            }
        }

		.widget__form {
			opacity: 0;
			pointer-events: none;
			position: fixed;

		&.active {
			max-width: 600px;
			width: 90%;
			display: flex;
			inset: 0;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			align-items: center;
			justify-content: center;
			padding: 0;
			z-index: 60;
			background-color: var(--primary);
			color: var(--headers-primary);
			padding: 30px;
			height:min-content;
			flex-direction: column;
			opacity: 1;
			transition: opacity 1s ease-in-out;
			pointer-events: all;
		}



		&.specific {
			position: fixed;
			max-width: 600px;
			width: 90%;
			display: flex;
			inset: 0;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			align-items: center;
			justify-content: center;
			padding: 0;
			z-index: 60;
			background-color: var(--primary);
			color: var(--headers-primary);
			padding: 40px 30px;
			height:min-content;
			border: 1px solid var(--headers-primary);
			flex-direction: column;
			opacity: 1;
			pointer-events: all;
			transition: opacity 1s ease-in-out;
		}
		}

		.blurry {
		position: fixed;
		width: 100%;
		height: 100dvh;
		background-color: #0b0b0b;
		inset: 0;
		z-index: 14;
		opacity: 0;
		pointer-events: none;
		&.active {
			pointer-events: all;
			opacity: .8;
			transition: opacity .5s ease-in-out;
		}

		&.callback {
			z-index: 16;
			opacity: .8;
			pointer-events: all;
			transition: opacity 1s ease-in-out;
		}

	}
	
	
	@keyframes shake {
            0% {
                transform: rotateZ(0deg);
                -ms-transform: rotateZ(0deg);
                -webkit-transform: rotateZ(0deg);
            }
            10% {
                transform: rotateZ(-30deg);
                -ms-transform: rotateZ(-30deg);
                -webkit-transform: rotateZ(-30deg);
            }
            20% {
                transform: rotateZ(15deg);
                -ms-transform: rotateZ(15deg);
                -webkit-transform: rotateZ(15deg);
            }
            30% {
                transform: rotateZ(-10deg);
                -ms-transform: rotateZ(-10deg);
                -webkit-transform: rotateZ(-10deg);
            }
    
            40% {
                transform: rotateZ(7.5deg);
                -ms-transform: rotateZ(7.5deg);
                -webkit-transform: rotateZ(7.5deg);
            }
            50% {
                transform: rotateZ(-6deg);
                -ms-transform: rotateZ(-6deg);
                -webkit-transform: rotateZ(-6deg);
            }
            60% {
                transform: rotateZ(5deg);
                -ms-transform: rotateZ(5deg);
                -webkit-transform: rotateZ(5deg);
            }
            70% {
                transform: rotateZ(-4.28571deg);
                -ms-transform: rotateZ(-4.28571deg);
                -webkit-transform: rotateZ(-4.28571deg);
            }
    
            80% {
                transform: rotateZ(3.75deg);
                -ms-transform: rotateZ(3.75deg);
                -webkit-transform: rotateZ(3.75deg);
            }
            90% {
                transform: rotateZ(-3.33333deg);
                -ms-transform: rotateZ(-3.33333deg);
                -webkit-transform: rotateZ(-3.33333deg);
            }
    
            100% {
                transform: rotateZ(0deg);
                -ms-transform: rotateZ(0deg);
                -webkit-transform: rotateZ(0deg);
            }
        }

		.menu-close-form {
            display: none;
    
            &.active {
                display: flex;
                position: absolute;
                right: 10px;
                top: 10px;
            }
    
            svg {
                width: 20px;
                height: 20px;
                fill: var(--primary);
    
                path {
                    fill: var(--headers-primary);
                }
            }
    
            
        }

		.header__workingHours {
			
			@media(max-width: 992px) {
				display: none;
        	}
			
			.hours__wrapper {
				display: flex;
				gap: 5px;
				margin-top: 10px;

				

				b {
					font-weight: normal;
				}
				span {
					font-weight: bold;
				}
			}
		}

		.location-wrapper {
			display: flex;
			gap: 5px;
			align-items: center;
		}

		.header__call-wrapper {
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 10px;

			@media(max-width: 992px) {
				margin-left: auto;
				margin-right: 15px;
			}

			@media(max-width: 650px) {
				display: none;
			}
		}

		.menu__orgInfo {
			display: flex;
			flex-direction: column;
			gap: 10px;
			margin-top: 40px;

			.menu__org-wrapper {
				display: flex;
				gap: 5px;
				align-items: center;
				font-size: 14px;
			}

			.menu__org-hours {
				display: flex;
				flex-direction: column;
				gap: 5px;
				b {
					font-weight:normal;
					
					span {
						font-weight: bold;
						margin-left: 10px;
					}
				}
			}
		}

		.tradeInOffer {
			width: 100%;
			display: flex;
			justify-content: center;
			background: var(--btn-primary);
			padding: clamp(.5rem, calc(.5rem + 0vw) , .5rem);
			text-align: center;
			position: relative;
			display: none;
			font-size: .875rem;
			// &.active {
			// 	display: flex;
			// 	visibility: visible;
			// }

			&.active {
				display: flex;
				visibility: visible;
			}

			&.hidden {
				display: none;
				visibility: hidden;
			}
			a {
				color: var(--primary);
				display: flex;
				text-decoration: underline;
				text-wrap: balance;
				line-height: 1.5;
				font-size: .875rem;
				&:hover {
					color: darken(white, 10%);
					text-decoration: none;
				}

				@media(max-width: 650px) {
					font-size: 14px;
				}

				@media(max-width: 410px) {
					font-size: 12px;
					padding-right: 25px;
				}
			}

			.tradeInOffer-close {
				position: absolute;
				right: 15px;
				top: 50%;
				transform: translateY(-50%);
                width: 13px;
                height: 13px;
				
				svg {
					width: 100%;
                height: 100%;
				position: absolute;
				inset: 0;
                fill: var(--primary);
                path {
                    fill: var(--primary);
                }
            }
			}
		}

		
</style>

<script>
	// let url = location.pathname

	// if (url[url.length - 1] != "/") {
	// url += "/";
	// window.location.replace(url);
	// }

	const tradeInOffer = document.querySelector('.tradeInOffer')
	const tradeInOfferClose = document.querySelector('.tradeInOffer-close')
	const tradeInOfferLink = document.querySelector('.tradeInOffer-link')
	
	tradeInOfferLink?.addEventListener('click', e => {
		sessionStorage.setItem('hidden', 'true')
		tradeInOffer.remove()
		tradeInOffer?.classList.add('hidden')
	})

	tradeInOfferClose?.addEventListener('click', e => {
		sessionStorage.setItem('hidden', 'true')
		tradeInOffer.remove()
		tradeInOffer?.classList.add('hidden')
	})

		if (sessionStorage.getItem('hidden') == 'true') {
			tradeInOffer?.classList.add('hidden')
			tradeInOffer.remove()
		}
		else {
			tradeInOffer?.classList.add('active')
		}
	
		


	

	const burgers = document.querySelectorAll('.burger')
	const menu = document.querySelector('.burger-menu')
	const close = document.querySelector('.menu-close')
	const body = document.querySelector('body')
	const blurry = document.querySelector('.blurry')
	const form = document.querySelector('.widget__form')
	
	burgers.forEach((burger) => {
		burger?.addEventListener('click', e => {
		menu?.classList.add('active')
		close?.classList.add('active')
		body?.classList.add('locked')
		blurry?.classList.add('active')
	})
	})

	close?.addEventListener('click', e => {
		menu?.classList.remove('active')
		close?.classList.remove('active')
		body?.classList.remove('locked')
		blurry?.classList.remove('active')
	})

	const stickyHeader = document.querySelector('.sticky__header')

	window.addEventListener('scroll', e => {
		if (window.scrollY > 500) {
		stickyHeader?.classList.add('active')
	}
	else {
		stickyHeader?.classList.remove('active')
	}
	})

	// window.addEventListener('resize', e => {
	// 	if (window.innerWidth > 992) {
    //         menu?.classList.remove('active')
    //         close?.classList.remove('active')
    //         body?.classList.remove('active')
	// 		blurry.classList.remove('active')
	// 		form.classList.remove('active')
    //     }
	// })

	
	const callbackBtns = document.querySelectorAll('.header__callback')
	const callbackModal = document.querySelector('.callback__modal')
	const callbackClose = document.querySelector('.callback-form__close')
	
	callbackBtns.forEach((callbackBtn) => {
		callbackBtn?.addEventListener('click', e => {
		callbackModal?.classList.add('active')
		blurry?.classList.add('callback')
		callbackClose?.classList.add('active')
		
	})
	})

	callbackClose?.addEventListener('click', e => {
		callbackModal?.classList.remove('active')
		blurry?.classList.remove('callback')
		callbackClose?.classList.remove('active')
		
	})



	const widget = document.querySelector('.widget')
	const closeWidgetForm = document.querySelector('.menu-close-form')
	const btnAction = document.querySelectorAll('.btn__action')
    widget?.addEventListener('click', e => {
        form?.classList.add('active')
        blurry?.classList.add('active')
        closeWidgetForm?.classList.add('active')
        body?.classList.add('locked')
    })

    btnAction.forEach((item) => {
        item.addEventListener('click', e => {
            e.preventDefault() 
            form?.classList.add('specific')
            blurry?.classList.add('active')
            closeWidgetForm?.classList.add('active')
            body?.classList.add('locked')
        })
    })

    
    blurry?.addEventListener('click', e => {
		if (blurry.classList.contains('callback')) {
			callbackModal?.classList.remove('active')
			blurry?.classList.remove('callback')
			return
		}
        form?.classList.remove('active')
        form?.classList.remove('specific')
        blurry?.classList.remove('active')
		blurry?.classList.remove('callback')
        closeWidgetForm?.classList.remove('active')
        body?.classList.remove('locked')
		callbackModal?.classList.remove('active')
		menu?.classList.remove('active')
        
    })
    closeWidgetForm?.addEventListener('click', e => {
        e.preventDefault()
        form?.classList.remove('active')
        form?.classList.remove('specific')
        blurry?.classList.remove('active')
        closeWidgetForm?.classList.remove('active')
        body?.classList.remove('locked')
        
    })


	const callbackForm: any = document.querySelector(".callback__form");
	const callbackPhone = document.querySelector('.callback__phoneInput')
	const titleH1 = document.querySelector('.title-h1').textContent
	async function sendData() {
	// Associate the FormData object with the form element
	const formData = new FormData(callbackForm);
	
	try {
		const response = await fetch(`https://monolid.yucrm.ru/api/orders/post?&phone=${callbackPhone.value}&object_name=${titleH1}&oauth_token=afd0bcd4ee3a219f27812dd4d20a550c`, {
		method: "POST",
		// Set the FormData instance as the request body
		body: formData,
		mode: 'no-cors',
		});
		console.log(await response.json());
	} catch (e) {
		console.error('2024');
	}
	}
	const callbackMessage = document.querySelector('.callbackMessage')
	// Take over form submission
	callbackForm.addEventListener("submit", (event) => {
	event.preventDefault();
	sendData();
	callbackMessage.classList.add('active')
	setTimeout(() => {
		callbackMessage.classList.remove('active')
	}, 5000);
	callbackPhone.value = ''
	});

	const widgetForm: any = document.querySelector(".widget__form");
	const heroName = document.querySelector('#hero__name')
	const heroPhone = document.querySelector('#hero__phone')
	async function sendData2() {
	// Associate the FormData object with the form element
	const formData = new FormData(widgetForm);

	try {
		const response = await fetch(`https://monolid.yucrm.ru/api/orders/post?&phone=${heroPhone.value}&object_name=${titleH1}&name=${heroName.value}&oauth_token=afd0bcd4ee3a219f27812dd4d20a550c`, {
		method: "POST",
		// Set the FormData instance as the request body
		body: formData,
		mode: 'no-cors',
		});
		console.log(await response.json());
	} catch (e) {
		console.error(e);
	}
	}

	const widgetMessage = document.querySelector('.widgetMessage')
	// Take over form submission
	widgetForm.addEventListener("submit", (event) => {
	event.preventDefault();
	sendData2();
	widgetMessage.classList.add('active')
	setTimeout(() => {
		widgetMessage.classList.remove('active')
	}, 5000);
	heroName.value = ''
	heroPhone.value = ''
	});

// 	const callbackForm: any = document.querySelector('.callback__form')
// 	callbackForm.onsubmit = async (e) => {
//     e.preventDefault();

//     let response = await fetch(``, {
//       method: 'POST',
//       body: new FormData(callbackForm)
//     });

//     let result = await response.json();

//     alert(result.message);
//   };
	
</script>