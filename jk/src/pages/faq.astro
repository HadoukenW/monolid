---
import Header from '../components/Header.astro'
import BaseHead from '../components/BaseHead.astro'
import { Breadcrumbs } from "astro-breadcrumbs";
import Footer from '../components/Footer.astro'
import "../../astro-breadcrumbs-config.scss";
import { getSanity } from '../lib/api';
import { urlForImage } from '../lib/urlForImage';
import PortableTextBody from '../components/PortableTextBody.astro';
import { myPortableTextComponents } from '../components/PortableTextComponents';
const customCrumbs = [
 {
    text: "Главная",
    href: "/",
  },
  {
    text: "Ответы на часто задаваемые вопросы",
    href: "/faq/",
  }
]

const faq = await getSanity(`*[_type == 'faq']`)

---

<!doctype html>
<html lang="ru">
	<head>
		<BaseHead title={faq[0]?.seo?.title} description={faq[0]?.seo?.description} ogImage={faq[0]?.seo?.ogImage ? urlForImage(faq[0]?.seo?.ogImage).url() : null} keywords={faq[0]?.seo?.keywords} />
	</head>
	<body>
		<div class="wrapper">
			<Header />
			<div class="breadcrumbs__container">
			    <div class="c-breadcrumbs"><Breadcrumbs crumbs={customCrumbs}>
                    <svg width="12" height="12" slot="separator" >
                        <text x="3" y="12" fill="#6c757d" font-size="18" font-family="Arial" unicode-bidi="embed">•</text>
                      </svg>
                            </Breadcrumbs>
                </div>
			</div>
				<main>
					<section aria-labelledby="faq__title">
                        <div class="container">
                            <h1 class="title-h1" id="faq__title">{faq[0]?.title}</h1>
                            
                            <ul class="accordion">
                                {
                                    faq[0].faq.map((item) => (
                                    <li class="accordion__item-anim">
                                        <div class="accordion__item" itemtype="https://schema.org/Question" itemscope>
                                            <div class="accordion__trigger">
                                                <div class="accordion__title" itemprop="name">{item.question}</div>
                                                <div class="svg__wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 21 13" fill="none"><path d="M1.75 2L10.25 10.5L18.75 2" stroke="#FFFFFF" stroke-width="3" stroke-linecap="round"/></svg></div>
                                            </div>
                                            <div class="accordion__content" itemtype="https://schema.org/Answer" itemprop="acceptedAnswer" itemscope>
                                                <p itemprop="text"><PortableTextBody body={item.answer} components={myPortableTextComponents}/></p>
                                            </div>
                                        </div>
                                    </li>
                                    ))
                                }
                                
                            </ul>
                        </div>
                    </section>
				</main>
			<Footer />
		</div>
	</body>
</html>



<style lang="scss">

        main {
            padding-bottom: 50px;
        }
        .breadcrumbs__container {
			max-width: 1330px;
			margin: 30px auto 0;
			padding: 0 15px;
            width: 100%;
		}

    section {
        h1 {
            font-weight: 700;
            font-size: var(--header-clamp);
            color: var(--headers-primary);
            text-align: center; 
            margin-bottom: 4rem;
            margin-top: 80px;
            @media(max-width: 767px) {
                margin-bottom: 2rem;
                margin-top: 60px;
            }
        }
        .accordion {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            width: 100%;
            margin-top: 3.5rem;



            .accordion__item-anim {
                visibility: hidden;
                box-shadow: 0 4px 17px 0px rgba(0, 0, 0, 0.09);
            }

            .accordion__item {
                background: var(--primary);
                transition: .2s ease-in-out;
                border-radius: 10px;
                color: var(--headers-primary);

                .svg__wrapper {
                    background-color: var(--btn-primary);
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 5px;
                    position: absolute;
                    right: 15px;
                    transform: translateY(-50%);
                    top: 50%;
                }

                

                &.active {
                    
                    svg {
                        rotate: 180deg;
                    }
                }
                
                .accordion__trigger {
                    cursor: pointer;
                    display: flex;
                    justify-content: space-between;
                    padding: clamp(1.25rem, 0.664rem + 1.95vw, 1.875rem);
                    align-items: center;
                    position: relative;
                    gap: 35px;
                    .accordion__title {
                        font-size: clamp(1.125rem, 0.891rem + 0.78vw, 1.375rem);
                        padding-right: 35px;
                    }
                }

                .accordion__content {
                    padding: 0 clamp(1.25rem, 0.664rem + 1.95vw, 1.875rem) 20px;
                    display: none;
                    font-size: clamp(1.125rem, 0.891rem + 0.78vw, 1.375rem);
                    line-height: 160%;
                    color: #0d0d0d;
                    font-weight: 400;

                    
                    ol {
                        counter-reset: num;
                        display: flex;
                        flex-direction: column;
                        gap: 8px;
                        li {
                            &:before {
                                content: counter(num) '.'; 
	                            counter-increment: num;
                                margin-right: 6px;
                            }
                        }
                    }
                }
            }

            
        }
    }


    h1 {
        font-weight: 700;
        font-size: var(--header-clamp);
        color: var(--headers-primary);
        text-align: center; 
        margin-top: 30px;
    }
    

</style>


<script>

    import { gsap } from "gsap";

    gsap.from('.accordion__item-anim', {
        y: 10,
        autoAlpha: 0,
        stagger: .3,
    })

    /* SLIDE UP */
let slideUp = (target, duration = 600) => {
	target.style.transitionProperty = 'height, margin, padding'
	target.style.transitionDuration = duration + 'ms'
	target.style.boxSizing = 'border-box'
	target.style.height = target.offsetHeight + 'px'
	target.offsetHeight
	target.style.overflow = 'hidden'
	target.style.height = 0
	target.style.paddingTop = 0
	target.style.paddingBottom = 0
	target.style.marginTop = 0
	target.style.marginBottom = 0
	target.style.border = 'none'
    target.style.transitionTimingFunction = 'ease'

	window.setTimeout(() => {
		target.style.display = 'none'
		target.style.removeProperty('height')
		target.style.removeProperty('padding-top')
		target.style.removeProperty('padding-bottom')
		target.style.removeProperty('margin-top')
		target.style.removeProperty('margin-bottom')
		target.style.removeProperty('overflow')
		target.style.removeProperty('transition-duration')
		target.style.removeProperty('transition-property')
		target.style.removeProperty('border')
	}, duration)
}
/* SLIDE DOWN */
let slideDown = (target, duration = 600) => {
	target.style.removeProperty('display')
	let display = window.getComputedStyle(target).display
	if (display === 'none') display = 'grid'
	target.style.display = display
	let height = target.offsetHeight
	target.style.overflow = 'hidden'
	target.style.height = 0
	target.style.paddingTop = 0
	target.style.paddingBottom = 0
	target.style.marginTop = 0
	target.style.marginBottom = 0
	target.offsetHeight
	target.style.boxSizing = 'border-box'
	target.style.transitionProperty = 'height, margin, padding'
	target.style.transitionDuration = duration + 'ms'
	target.style.height = height + 'px'
	target.style.border = 'none'
    target.style.transitionTimingFunction = 'ease'
	target.style.removeProperty('padding-top')
	target.style.removeProperty('padding-bottom')
	target.style.removeProperty('margin-top')
	target.style.removeProperty('margin-bottom')
	target.style.removeProperty('border')

	window.setTimeout(() => {
		target.style.removeProperty('height')
		target.style.removeProperty('overflow')
		target.style.removeProperty('transition-duration')
		target.style.removeProperty('transition-property')
		target.style.removeProperty('border')
	}, duration)
}

function smoothening() {
    const items = document.querySelectorAll('.accordion__item')
    const summaries = document.querySelectorAll('.accordion__trigger')
    const itemBody = document.querySelectorAll('.accordion__content')

    summaries.forEach((summary, idx) => {
        summary?.addEventListener('click', e => {
            // @ts-ignore
            if (!summary.parentNode?.classList.contains('active')) {
                // @ts-ignore
                summary.parentNode.classList.add('active')
                slideDown(itemBody[idx])

                items.forEach((item, i) => {
                    if (i !== idx && item.classList.contains('active')) {
                        slideUp(itemBody[i])
                        // @ts-ignore
                        item.classList.remove('active')
                    }
                })
            }
            else {
                // @ts-ignore
                summary.parentNode.classList.remove('active')
                slideUp(itemBody[idx])
            }
        })
    })
}

smoothening()
</script>